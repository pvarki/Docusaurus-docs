"use strict";(self.webpackChunkpvarki_docs=self.webpackChunkpvarki_docs||[]).push([[4388],{837:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"dev/documentation/manual/conventional commits","title":"Conventional Commits","description":"Introduction","source":"@site/i18n/fi/docusaurus-plugin-content-docs/current/dev/documentation/manual/conventional commits.md","sourceDirName":"dev/documentation/manual","slug":"/dev/documentation/manual/conventional commits","permalink":"/fi/docs/dev/documentation/manual/conventional commits","draft":false,"unlisted":false,"editUrl":"https://github.com/pvarki/docs/dev/documentation/manual/conventional commits.md","tags":[],"version":"current","frontMatter":{}}');var i=s(4848),o=s(8453);const r={},a="Conventional Commits",c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Commit Message Format",id:"commit-message-format",level:2},{value:"Types",id:"types",level:3},{value:"Scope",id:"scope",level:3},{value:"Subject",id:"subject",level:3},{value:"Body",id:"body",level:3},{value:"Footer",id:"footer",level:3},{value:"Examples",id:"examples",level:2},{value:"Using Release Please",id:"using-release-please",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"conventional-commits",children:"Conventional Commits"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Conventional Commits is a specification for writing commit messages that are easy to read and understand. By following this convention, you can automate the release process, generate changelogs, and maintain a consistent commit history. This project uses the Conventional Commits specification to ensure that all commit messages are structured and meaningful."}),"\n",(0,i.jsx)(n.h2,{id:"commit-message-format",children:"Commit Message Format"}),"\n",(0,i.jsx)(n.p,{children:"A commit message consists of a header, an optional body, and an optional footer. The header has a specific format that includes a type, an optional scope, and a subject."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.p,{children:"The type indicates the nature of the change. Common types include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"feat"}),": A new feature"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"fix"}),": A bug fix"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"docs"}),": Documentation changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"style"}),": Code style changes (e.g., formatting, missing semicolons)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"refactor"}),": Code refactoring (neither fixes a bug nor adds a feature)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"perf"}),": Performance improvements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"test"}),": Adding or updating tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"chore"}),": Changes to the build process or auxiliary tools"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scope",children:"Scope"}),"\n",(0,i.jsxs)(n.p,{children:["The scope is optional and provides additional context about the change. It should be a noun describing what is affected (e.g., ",(0,i.jsx)(n.code,{children:"ui"}),", ",(0,i.jsx)(n.code,{children:"backend"}),", ",(0,i.jsx)(n.code,{children:"docs"}),")."]}),"\n",(0,i.jsx)(n.h3,{id:"subject",children:"Subject"}),"\n",(0,i.jsx)(n.p,{children:'The subject is a brief description of the change. It should be concise and written in the imperative mood (e.g., "add", "fix", "update").'}),"\n",(0,i.jsx)(n.h3,{id:"body",children:"Body"}),"\n",(0,i.jsx)(n.p,{children:"The body is optional and provides a more detailed explanation of the change. It should include any relevant information that helps understand the change."}),"\n",(0,i.jsx)(n.h3,{id:"footer",children:"Footer"}),"\n",(0,i.jsxs)(n.p,{children:["The footer is optional and can include references to issues or breaking changes. Use the ",(0,i.jsx)(n.code,{children:"BREAKING CHANGE:"})," prefix to indicate a breaking change."]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.p,{children:"Here are some examples of Conventional Commits:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Feature"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"feat(ui): add dark mode toggle\n\nThis commit adds a dark mode toggle to the user interface, allowing users to switch between light and dark themes.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Bug Fix"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"fix(api): correct user authentication logic\n\nThis commit fixes the user authentication logic to properly handle edge cases where the user token is expired.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docs(readme): update installation instructions\n\nThis commit updates the installation instructions in the README to include steps for setting up the project on Windows.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Style"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"style(css): format CSS files\n\nThis commit formats the CSS files to ensure consistent indentation and spacing.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Refactor"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"refactor(auth): simplify authentication middleware\n\nThis commit refactors the authentication middleware to reduce complexity and improve readability.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"perf(api): optimize database queries\n\nThis commit optimizes the database queries to improve the performance of the API endpoints.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"test(auth): add unit tests for authentication module\n\nThis commit adds unit tests for the authentication module to ensure that all edge cases are covered.\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Chore"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"chore(deps): update dependencies\n\nThis commit updates the project dependencies to their latest versions.\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"using-release-please",children:"Using Release Please"}),"\n",(0,i.jsxs)(n.p,{children:["We use ",(0,i.jsx)(n.a,{href:"https://github.com/googleapis/release-please",children:"Release Please"})," to automate the release process. Release Please generates release notes and version bumps based on the Conventional Commits in the repository. By following the Conventional Commits specification, you ensure that Release Please can accurately determine the changes and generate the appropriate release notes."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);