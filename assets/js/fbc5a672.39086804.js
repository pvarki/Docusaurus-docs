"use strict";(self.webpackChunkpvarki_docs=self.webpackChunkpvarki_docs||[]).push([[637],{2793:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"dev/documentation/automatic/docusaurus","title":"Using Docusaurus for Automatic Documentation","description":"Introduction","source":"@site/docs/dev/documentation/automatic/docusaurus.md","sourceDirName":"dev/documentation/automatic","slug":"/dev/documentation/automatic/docusaurus","permalink":"/dev/documentation/automatic/docusaurus","draft":false,"unlisted":false,"editUrl":"https://github.com/pvarki/docs/dev/documentation/automatic/docusaurus.md","tags":[],"version":"current","frontMatter":{}}');var s=t(4848),i=t(8453);const c={},r="Using Docusaurus for Automatic Documentation",a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Fetching Documentation",id:"fetching-documentation",level:2},{value:"Script: <code>fetch_docs.sh</code>",id:"script-fetch_docssh",level:3},{value:"Building and Deploying Documentation",id:"building-and-deploying-documentation",level:2},{value:"Workflow: <code>docs.yml</code>",id:"workflow-docsyml",level:3},{value:"Customizing the Sidebar",id:"customizing-the-sidebar",level:2},{value:"Script: <code>sidebar.js</code>",id:"script-sidebarjs",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Configuration: <code>docusaurus.config.js</code>",id:"configuration-docusaurusconfigjs",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"using-docusaurus-for-automatic-documentation",children:"Using Docusaurus for Automatic Documentation"})}),"\n",(0,s.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(e.p,{children:"Docusaurus is a modern static site generator that helps you build optimized websites quickly. In this project, Docusaurus is used to generate and host the documentation for the Rasenmaeher project. The documentation is automatically fetched, built, and deployed using a combination of scripts and GitHub Actions."}),"\n",(0,s.jsx)(e.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(e.p,{children:"The project is organized as follows:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-plaintext",children:"MainDocs/\n    docs/               # Documentation source files\n    docusaurus.config.js # Docusaurus configuration\n    sidebar.js          # Sidebar configuration\n    src/\n        css/            # Custom CSS\n            custom.css\npackage.json            # Project dependencies and scripts\nscripts/\n    fetch_docs.sh       # Script to fetch documentation\ndockerfile              # Dockerfile for building the Docker image\n"})}),"\n",(0,s.jsx)(e.h2,{id:"fetching-documentation",children:"Fetching Documentation"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"fetch_docs.sh"})," script is responsible for fetching the latest documentation from the main repository and its submodules. This script is executed as part of the GitHub Actions workflow."]}),"\n",(0,s.jsxs)(e.h3,{id:"script-fetch_docssh",children:["Script: ",(0,s.jsx)(e.code,{children:"fetch_docs.sh"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:'#!/bin/sh\nset -e\n\n# Force Git to use HTTPS instead of SSH (so submodules clone via HTTPS)\ngit config --global url."https://github.com/".insteadOf "git@github.com:"\n\n# Define absolute paths\nREPO_URL="https://github.com/pvarki/docker-rasenmaeher-integration.git"\nWORKSPACE="${GITHUB_WORKSPACE:-$(pwd)}"\nDEST_PARENT="$WORKSPACE/MainDocs"\nDEST_DIR="$DEST_PARENT/docs"\nTEMP_DIR="$WORKSPACE/repo_temp"\n\n# Clean any previous directories to ensure a clean slate\nrm -rf "$DEST_PARENT" "$TEMP_DIR"\nmkdir -p "$DEST_DIR"\n\n# Clone the main repository (using HTTPS) into TEMP_DIR\ngit clone "$REPO_URL" "$TEMP_DIR"\ncd "$TEMP_DIR"\n\n# Update submodules recursively (they\u2019ll be cloned via HTTPS thanks to our global config)\ngit submodule update --init --recursive\n\n# Copy only Markdown files (case-insensitive) while preserving the directory structure\nfind . -iname "*.md" -exec rsync -R {} "$DEST_DIR" \\;\n\n# Remove empty directories\nfind "$DEST_DIR" -type d -empty -delete\n\n# Clean up temporary clone\nrm -rf "$TEMP_DIR"\n\necho "Markdown files and folder structure copied to $DEST_DIR"\n'})}),"\n",(0,s.jsx)(e.h2,{id:"building-and-deploying-documentation",children:"Building and Deploying Documentation"}),"\n",(0,s.jsxs)(e.p,{children:["The documentation is built and deployed using GitHub Actions. The workflow is defined in ",(0,s.jsx)(e.code,{children:".github/workflows/docs.yml"}),"."]}),"\n",(0,s.jsxs)(e.h3,{id:"workflow-docsyml",children:["Workflow: ",(0,s.jsx)(e.code,{children:"docs.yml"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yml",children:'name: Build Docusaurus Docs\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches-ignore:\n      - release-please--branches--main\n  workflow_dispatch:\n\njobs:\n  pull-docs:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout Main Repository\n        uses: actions/checkout@v4\n        with:\n          submodules: true\n          fetch-depth: 0\n\n      - name: Make fetch_docs.sh Executable\n        run: chmod +x ${{ github.workspace fetch_docs.sh\n\n      - name: Fetch All Docs\n        run: ${{ github.workspace fetch_docs.sh\n\n      - name: Upload Docs Artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: docs-raw\n          path: ${{ github.workspace }}/MainDocs/docs/\n\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    needs: pull-docs\n    steps:\n      - name: Checkout Documentation Repo\n        uses: actions/checkout@v4\n\n      - name: Build Docker Image\n        run: |\n          docker build -t pvarki/pvarkidocs:latest -f dockerfile .\n\n      - name: Log in to Docker Hub\n        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin\n\n      - name: Push Docker Image to Docker Hub\n        run: |\n          docker push pvarki/pvarkidocs:latest\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Download Built Docs Artifact\n        uses: actions/download-artifact@v4\n        with:\n          name: docs-raw\n          path: ${{ github.workspace }}/MainDocs/build\n\n      - name: Install Dependencies\n        run: npm install\n        working-directory: ${{ github.workspace }}/MainDocs\n\n      - name: Build Docusaurus Site\n        run: npm run build\n        working-directory: ${{ github.workspace }}/MainDocs\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ${{ github.workspace }}/MainDocs/build\n'})}),"\n",(0,s.jsx)(e.h2,{id:"customizing-the-sidebar",children:"Customizing the Sidebar"}),"\n",(0,s.jsxs)(e.p,{children:["The sidebar is automatically generated based on the directory structure of the ",(0,s.jsx)(e.code,{children:"docs"})," folder. The configuration is defined in ",(0,s.jsx)(e.code,{children:"sidebar.js"}),"."]}),"\n",(0,s.jsxs)(e.h3,{id:"script-sidebarjs",children:["Script: ",(0,s.jsx)(e.code,{children:"sidebar.js"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"const fs = require('fs');\nconst path = require('path');\n\nconst docsDir = 'docs';\n\nfunction getSidebarItems(dir) {\n  const entries = fs.readdirSync(dir).sort((a, b) => a.localeCompare(b));\n  const items = [];\n\n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry);\n    const stats = fs.statSync(fullPath);\n\n    if (stats.isDirectory()) {\n      const childItems = getSidebarItems(fullPath);\n      const readmePath = path.join(fullPath, 'README.md');\n      if (fs.existsSync(readmePath)) {\n        const readmeId = path\n          .relative(docsDir, readmePath)\n          .replace(/\\\\/g, '/')\n          .replace(/\\.md$/, '');\n\n        items.push({\n          type: 'category',\n          label: entry,\n          link: {\n            type: 'doc',\n            id: readmeId,\n          },\n          items: childItems.filter((item) => item !== readmeId),\n        });\n      } else if (childItems.length > 0) {\n        items.push({\n          type: 'category',\n          label: entry,\n          items: childItems,\n        });\n      }\n    } else if (stats.isFile() && entry.toLowerCase().endsWith('.md')) {\n      const docId = path\n        .relative(docsDir, fullPath)\n        .replace(/\\\\/g, '/')\n        .replace(/\\.md$/, '');\n\n      if (entry.toLowerCase() === 'readme.md') {\n        items.unshift(docId);\n      } else {\n        items.push(docId);\n      }\n    }\n  }\n\n  return items;\n}\n\nmodule.exports = {\n  docs: getSidebarItems(docsDir),\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["The Docusaurus configuration is defined in ",(0,s.jsx)(e.code,{children:"docusaurus.config.js"}),"."]}),"\n",(0,s.jsxs)(e.h3,{id:"configuration-docusaurusconfigjs",children:["Configuration: ",(0,s.jsx)(e.code,{children:"docusaurus.config.js"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import path from 'path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default {\n    title: 'Static docs',\n    tagline: 'documentation for rasenmaher',\n    url: 'https://example.com',\n    baseUrl: '/',\n    onBrokenLinks: 'warn',\n    onBrokenMarkdownLinks: 'warn',\n    favicon: 'img/favicon.ico',\n    organizationName: 'PVarki',\n    projectName: 'Rasenmaeher',\n    themeConfig: {\n        navbar: {\n            title: 'Rasenmaeher',\n            logo: {\n                alt: 'Site Logo',\n                src: 'img/logo.svg',\n            },\n            items: [\n                {\n                    to: '/docs',\n                    activeBasePath: '/docs',\n                    label: 'Docs',\n                    position: 'left',\n                },\n                {\n                    href: 'https://github.com/your-org/your-project',\n                    label: 'GitHub',\n                    position: 'right',\n                },\n            ],\n        },\n        devServer: {\n            host: '0.0.0.0',\n          },\n        footer: {\n            style: 'dark',\n            links: [\n                {\n                    title: 'Docs',\n                    items: [\n                        {\n                            label: 'Getting Started',\n                            to: '/docs',\n                        },\n                    ],\n                },\n            ],\n            copyright: `Copyright \xa9 ${new Date().getFullYear()} Your Project, Inc. Built with Docusaurus.`,\n        },\n    },\n    presets: [\n        [\n            '@docusaurus/preset-classic',\n            {\n                docs: {\n                    path: path.resolve(__dirname, 'docs'),\n                    sidebarPath: path.resolve(__dirname, 'sidebar.js'),\n                    editUrl: 'https://github.com/your-org/your-project/edit/main/website/',\n                },\n                theme: {\n                    customCss: path.resolve(__dirname, 'src/css/custom.css'),\n                },\n            },\n        ],\n    ],\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(e.p,{children:"By following the above steps and configurations, you can effectively use Docusaurus to automatically generate and deploy documentation for the Rasenmaeher project. The combination of scripts and GitHub Actions ensures that the documentation is always up-to-date and easily accessible."})]})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>r});var o=t(6540);const s={},i=o.createContext(s);function c(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);